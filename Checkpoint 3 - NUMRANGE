/*
Given an array of non negative integers A, and a range (B, C), 
find the number of continuous subsequences in the array which have sum S in the range [B, C] or B <= S <= C

Continuous subsequence is defined as all the numbers A[i], A[i + 1], .... A[j]
where 0 <= i <= j < size(A)

Example :

A : [10, 5, 1, 0, 2]
(B, C) : (6, 8)
ans = 3 
as [5, 1], [5, 1, 0], [5, 1, 0, 2] are the only 3 continuous subsequence with their sum in the range [6, 8]

 NOTE : The answer is guranteed to fit in a 32 bit signed integer. 
*/

public class Solution {
	public int numRange(ArrayList<Integer> a, int b, int c) {
	    int count = 0;
	    int left = 0, right = 0;
	    
	    int[] sums = new int[a.size()];
	    for (int i = 0; i < a.size(); i++) {
	        int prev = i > 0 ? sums[i - 1] : 0;
	        
	        sums[i] = a.get(i) + prev;
	    }
	    
	    for (int i = 0; i < a.size(); i++) {
	        for (int j = i; j < a.size(); j++) {
	            int sum = sums[j] - sums[i] + a.get(i);
	            if (b <= sum && sum <= c) {
	                count++;
	            } else if (sum > c) {
	                break;
	            }
	        }
	    }
	    
	    return count;
	}
}
